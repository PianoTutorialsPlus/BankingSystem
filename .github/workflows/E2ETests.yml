name: E2E Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  e2e-tests:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --configuration Release --no-restore

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20.x

    # -------------------------------
    # Install Playwright browsers
    # -------------------------------
    - name: Install Playwright browsers
      shell: pwsh
      run: ./BankingSystem.E2ETests/bin/Release/net8.0-windows/playwright.ps1 install --with-deps

    - name: Publish and serve Blazor UI
      shell: pwsh
      env:
        ASPNETCORE_ENVIRONMENT: CI
      run: |
        # Start API first
        $apiProc = Start-Process dotnet `
          -ArgumentList "run --project BankingSystem.Api/BankingSystem.Api.csproj --urls=http://localhost:7178 --no-launch-profile" `
          -NoNewWindow -PassThru
        Write-Host "Started API process ID: $($apiProc.Id)"

        # Wait for API to become ready
        $maxRetries = 30
        $ready = $false
        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $resp = Invoke-WebRequest -Uri "http://localhost:7178/health" -UseBasicParsing -TimeoutSec 5
            if ($resp.StatusCode -eq 200) {
              Write-Host "API ready!"
              $ready = $true
              break
            }
          } catch {
            Start-Sleep -Seconds 2
          }
        }
        if (-not $ready) { Write-Error "API never became ready"; exit 1 }

        # Publish Blazor UI
        dotnet publish BankingSystem.UI/BankingSystem.UI.csproj -c Release -o publish

        # Install Node.js static server
        npm install -g serve

        # Serve the published UI with SPA fallback
        Start-Process npx -ArgumentList "serve publish -l 7247 --single" -NoNewWindow -PassThru

        # Wait for UI to become ready
        $maxRetries = 30
        $ready = $false
        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $resp = Invoke-WebRequest -Uri "http://localhost:7247" -UseBasicParsing -TimeoutSec 5
            if ($resp.StatusCode -eq 200) {
              Write-Host "UI ready!"
              $ready = $true
              break
            }
          } catch {
            Start-Sleep -Seconds 2
          }
        }
        if (-not $ready) { Write-Error "UI never became ready"; exit 1 }

        # Run E2E tests
        dotnet test BankingSystem.E2ETests/ --configuration Release --no-build --verbosity normal --settings BankingSystem.E2ETests/BankingSystem.E2ETests.runsettings




    # -------------------------------
    # Start API
    # -------------------------------
    # - name: Start API
    #   shell: pwsh
    #   env:
    #     ASPNETCORE_ENVIRONMENT: CI
    #   run: |
    #     $apiProc = Start-Process dotnet `
    #       -ArgumentList "run --project BankingSystem.Api/BankingSystem.Api.csproj --urls=http://localhost:7178 --no-launch-profile" `
    #       -NoNewWindow -PassThru
    #     Write-Host "Started API process ID: $($apiProc.Id)"

    #     # Wait for API to become ready
    #     $maxRetries = 30
    #     $ready = $false
    #     for ($i = 0; $i -lt $maxRetries; $i++) {
    #       try {
    #         $resp = Invoke-WebRequest -Uri "http://localhost:7178/health" -UseBasicParsing -TimeoutSec 5
    #         if ($resp.StatusCode -eq 200) {
    #           Write-Host "API ready!"
    #           $ready = $true
    #           break
    #         }
    #       } catch {
    #         Start-Sleep -Seconds 2
    #       }
    #     }
    #     if (-not $ready) {
    #       Write-Error "API never became ready"
    #       exit 1
    #     }

    # -------------------------------
    # Start UI (Blazor WebAssembly)
    # -------------------------------
    # - name: Publish and serve Blazor UI
    #   shell: pwsh
    #   env:
    #     ASPNETCORE_ENVIRONMENT: CI
    #   run: |
    #     $apiProc = Start-Process dotnet `
    #       -ArgumentList "run --project BankingSystem.Api/BankingSystem.Api.csproj --urls=http://localhost:7178 --no-launch-profile" `
    #       -NoNewWindow -PassThru
    #     Write-Host "Started API process ID: $($apiProc.Id)"

    #     # Wait for API to become ready
    #     $maxRetries = 30
    #     $ready = $false
    #     for ($i = 0; $i -lt $maxRetries; $i++) {
    #       try {
    #         $resp = Invoke-WebRequest -Uri "http://localhost:7178/health" -UseBasicParsing -TimeoutSec 5
    #         if ($resp.StatusCode -eq 200) {
    #           Write-Host "API ready!"
    #           $ready = $true
    #           break
    #         }
    #       } catch {
    #         Start-Sleep -Seconds 2
    #       }
    #     }
    #     if (-not $ready) {
    #       Write-Error "API never became ready"
    #       exit 1
    #     }

    #     dotnet publish BankingSystem.UI/BankingSystem.UI.csproj -c Release -o publish

    #     # Use dotnet serve from published folder
    #     dotnet tool install --global dotnet-serve
    #     $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
    #     Start-Process dotnet -ArgumentList "serve -d publish -p 7247" -NoNewWindow -PassThru

    #     # Wait for UI to become ready
    #     $maxRetries = 30
    #     $ready = $false
    #     for ($i = 0; $i -lt $maxRetries; $i++) {
    #       try {
    #         $resp = Invoke-WebRequest -Uri "http://localhost:7247" -UseBasicParsing -TimeoutSec 5
    #         if ($resp.StatusCode -eq 200) {
    #           Write-Host "UI ready!"
    #           $ready = $true
    #           break
    #         }
    #       } catch {
    #         Start-Sleep -Seconds 2
    #       }
    #     }
    #     if (-not $ready) {
    #       Write-Error "UI never became ready"
    #       exit 1
    #     }
    #     dotnet test BankingSystem.E2ETests/ --configuration Release --no-build --verbosity normal --settings BankingSystem.E2ETests/BankingSystem.E2ETests.runsettings

    #     # Keep the process reference to prevent it from being garbage collected
    #     Write-Host "Server process id: $($server.Id)"

    # -------------------------------
    # Run E2E Tests
    # -------------------------------
    - name: Run E2E Tests
      env:
        BASE_URL: http://localhost:7247
      run: dotnet test BankingSystem.E2ETests/ --configuration Release --no-build --verbosity normal --settings BankingSystem.E2ETests/BankingSystem.E2ETests.runsettings



# name: E2E Tests

# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]

# jobs:
#   e2e-tests:
#     runs-on: windows-latest
#     timeout-minutes: 60

#     steps:
#     - uses: actions/checkout@v5

#     - name: Setup .NET
#       uses: actions/setup-dotnet@v5
#       with:
#         dotnet-version: 8.0.x

#     - name: Restore dependencies
#       run: dotnet restore

#     - name: Build all projects
#       run: dotnet build --configuration Release --no-restore


#       # - name: Start API and UI together
#     - name: Publish Blazor WebAssembly
#       run: dotnet publish BankingSystem.UI/BankingSystem.UI.csproj -c Release -o BankingSystem.Api/wwwroot

#     - name: List published wwwroot
#       run: dir BankingSystem.Api/wwwroot

#     - name: Start API and wait
#       shell: pwsh
#       env:
#         ASPNETCORE_ENVIRONMENT: CI
#       run: |
#         $proc = Start-Process dotnet `
#           -ArgumentList "run --project BankingSystem.Api/BankingSystem.Api.csproj --urls=http://localhost:7178 --no-launch-profile" `
#           -NoNewWindow -PassThru
#         Write-Host "Waiting for API to be ready..."
#         $maxRetries = 60
#         $ready = $false
#         for ($i=0; $i -lt $maxRetries; $i++) {
#           try {
#             $resp = Invoke-WebRequest -Uri "http://localhost:7178/health" -UseBasicParsing -TimeoutSec 5
#             Write-Host "Response status: $($resp.StatusCode)"
#             if ($resp.StatusCode -eq 200) {
#               Write-Host "✅ API ready!"
#               $ready = $true
#               break
#             }
#           } catch {
#             Write-Host "Attempt $i failed: $($_.Exception.Message)"
#             Start-Sleep -Seconds 2
#           }
#         }
#         if (-not $ready) { Write-Error "API never became ready"; exit 1 }

#     # - name: Start UI with logging
#     #   shell: pwsh
#     #   run: |
#     #     Write-Host "UI stdout: $uiOutLog, stderr: $uiErrLog"
#     #     $ui = Start-Process dotnet `
#     #         -ArgumentList "run --project BankingSystem.UI/BankingSystem.UI.csproj --urls=http://localhost:7247" --no-launch-profile" `
#     #         -NoNewWindow -PassThru
#     #     Write-Host "Waiting for API to be ready..."
#     #     $maxRetries = 60
#     #     $ready = $false
#     #     for ($i=0; $i -lt $maxRetries; $i++) {
#     #       try {
#     #         $resp = Invoke-WebRequest -Uri "http://localhost:7247" -UseBasicParsing -TimeoutSec 5
#     #         Write-Host "Response status: $($resp.StatusCode)"
#     #         if ($resp.StatusCode -eq 200) {
#     #           Write-Host "✅ API ready!"
#     #           $ready = $true
#     #           break
#     #         }
#     #       } catch {
#     #         Write-Host "Attempt $i failed: $($_.Exception.Message)"
#     #         Start-Sleep -Seconds 2
#     #       }
#     #     }
#     #     if (-not $ready) { Write-Error "API never became ready"; exit 1 }

#     # - name: Wait for API and UI to start
#     #   shell: pwsh
#     #   run: |
#     #     $urls = @(
#     #       "http://localhost:7178/health", # API
#     #       "http://localhost:7247/"   # UI
#     #     )
#     #     foreach ($url in $urls) {
#     #       Write-Host "Waiting for $url..."
#     #       $maxRetries = 30
#     #       $ready = $false
#     #       for ($i=0; $i -lt $maxRetries; $i++) {
#     #         try {
#     #           $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 5
#     #           if ($response.StatusCode -eq 200) {
#     #             Write-Host "$url is ready!"
#     #             $ready = $true
#     #             break
#     #           }
#     #         } catch {
#     #           Start-Sleep -Seconds 2
#     #         }
#     #       }
#     #       if (-not $ready) {
#     #         Write-Error "Timeout waiting for $url"
#     #         exit 1
#     #       }
#     #     }

#     - name: Install Playwright browsers
#       shell: pwsh
#       run: ./BankingSystem.E2ETests/bin/Release/net8.0-windows/playwright.ps1 install --with-deps

#     - name: Run E2E Tests
#       env:
#         BASE_URL: http://localhost:7178
#       run: dotnet test BankingSystem.E2ETests/ --configuration Release --no-build --verbosity normal --settings BankingSystem.E2ETests/BankingSystem.E2ETests.runsettings

#     - name: Upload Playwright artifacts
#       if: always()
#       uses: actions/upload-artifact@v4
#       with:
#         name: playwright-screenshots
#         path: |
#           **/page.png
#           **/playwright-report
