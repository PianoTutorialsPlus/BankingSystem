name: E2E Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  e2e-tests:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build projects
      run: dotnet build --configuration Release --no-restore

    # -------------------------------
    # Start API
    # -------------------------------
    - name: Start API
      shell: pwsh
      run: |
        $env:ASPNETCORE_ENVIRONMENT = "Development"
        $apiProc = Start-Process dotnet `
          -ArgumentList "run --project BankingSystem.Api/BankingSystem.Api.csproj --urls=http://localhost:7178 --no-launch-profile" `
          -NoNewWindow -PassThru
        Write-Host "Started API process ID: $($apiProc.Id)"

        # Wait for API to become ready
        $maxRetries = 30
        $ready = $false
        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $resp = Invoke-WebRequest -Uri "http://localhost:7178" -UseBasicParsing -TimeoutSec 5
            if ($resp.StatusCode -eq 200) {
              Write-Host "API ready!"
              $ready = $true
              break
            }
          } catch {
            Start-Sleep -Seconds 2
          }
        }
        if (-not $ready) {
          Write-Error "API never became ready"
          exit 1
        }

    # -------------------------------
    # Start UI (Blazor WebAssembly)
    # -------------------------------
    - name: Publish and serve Blazor UI
      shell: pwsh
      run: |
        dotnet publish BankingSystem.UI/BankingSystem.UI.csproj -c Release -o publish

        # Use dotnet serve from published folder
        dotnet tool install --global dotnet-serve
        $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
        Start-Process dotnet -ArgumentList "serve -d publish -p 7247" -NoNewWindow -PassThru

        # Wait for UI to become ready
        $maxRetries = 30
        $ready = $false
        for ($i = 0; $i -lt $maxRetries; $i++) {
          try {
            $resp = Invoke-WebRequest -Uri "http://localhost:7247" -UseBasicParsing -TimeoutSec 5
            if ($resp.StatusCode -eq 200) {
              Write-Host "UI ready!"
              $ready = $true
              break
            }
          } catch {
            Start-Sleep -Seconds 2
          }
        }
        if (-not $ready) {
          Write-Error "UI never became ready"
          exit 1
        }

    # -------------------------------
    # Install Playwright browsers
    # -------------------------------
    - name: Install Playwright browsers
      shell: pwsh
      run: ./BankingSystem.E2ETests/bin/Release/net8.0-windows/playwright.ps1 install --with-deps

    # -------------------------------
    # Run E2E Tests
    # -------------------------------
    - name: Run E2E Tests
      env:
        BASE_URL: http://localhost:7247
      run: dotnet test BankingSystem.E2ETests/ --configuration Release --no-build --verbosity normal --settings BankingSystem.E2ETests/BankingSystem.E2ETests.runsettings
