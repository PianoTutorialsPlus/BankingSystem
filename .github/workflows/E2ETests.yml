name: E2E Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  e2e-tests:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v5

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build all projects
      run: dotnet build --configuration Release --no-restore


      # - name: Start API and UI together

    - name: Start API and wait
      shell: pwsh
      env:
        ASPNETCORE_ENVIRONMENT: CI
      run: |
        $proc = Start-Process dotnet `
          -ArgumentList "run --project BankingSystem.Api/BankingSystem.Api.csproj --urls=http://localhost:7178 --no-launch-profile" `
          -NoNewWindow -PassThru
        Write-Host "Waiting for API to be ready..."
        $maxRetries = 60
        $ready = $false
        for ($i=0; $i -lt $maxRetries; $i++) {
          try {
            $resp = Invoke-WebRequest -Uri "http://localhost:7178/health" -UseBasicParsing -TimeoutSec 5
            Write-Host "Response status: $($resp.StatusCode)"
            if ($resp.StatusCode -eq 200) {
              Write-Host "✅ API ready!"
              $ready = $true
              break
            }
          } catch {
            Write-Host "Attempt $i failed: $($_.Exception.Message)"
            Start-Sleep -Seconds 2
          }
        }
        if (-not $ready) { Write-Error "API never became ready"; exit 1 }

    # - name: Start UI with logging
    #   shell: pwsh
    #   run: |
    #     Write-Host "UI stdout: $uiOutLog, stderr: $uiErrLog"
    #     $ui = Start-Process dotnet `
    #         -ArgumentList "run --project BankingSystem.UI/BankingSystem.UI.csproj --urls=http://localhost:7247" --no-launch-profile" `
    #         -NoNewWindow -PassThru
    #     Write-Host "Waiting for API to be ready..."
    #     $maxRetries = 60
    #     $ready = $false
    #     for ($i=0; $i -lt $maxRetries; $i++) {
    #       try {
    #         $resp = Invoke-WebRequest -Uri "http://localhost:7247" -UseBasicParsing -TimeoutSec 5
    #         Write-Host "Response status: $($resp.StatusCode)"
    #         if ($resp.StatusCode -eq 200) {
    #           Write-Host "✅ API ready!"
    #           $ready = $true
    #           break
    #         }
    #       } catch {
    #         Write-Host "Attempt $i failed: $($_.Exception.Message)"
    #         Start-Sleep -Seconds 2
    #       }
    #     }
    #     if (-not $ready) { Write-Error "API never became ready"; exit 1 }

    # - name: Wait for API and UI to start
    #   shell: pwsh
    #   run: |
    #     $urls = @(
    #       "http://localhost:7178/health", # API
    #       "http://localhost:7247/"   # UI
    #     )
    #     foreach ($url in $urls) {
    #       Write-Host "Waiting for $url..."
    #       $maxRetries = 30
    #       $ready = $false
    #       for ($i=0; $i -lt $maxRetries; $i++) {
    #         try {
    #           $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 5
    #           if ($response.StatusCode -eq 200) {
    #             Write-Host "$url is ready!"
    #             $ready = $true
    #             break
    #           }
    #         } catch {
    #           Start-Sleep -Seconds 2
    #         }
    #       }
    #       if (-not $ready) {
    #         Write-Error "Timeout waiting for $url"
    #         exit 1
    #       }
    #     }

    - name: Install Playwright browsers
      shell: pwsh
      run: ./BankingSystem.E2ETests/bin/Release/net8.0-windows/playwright.ps1 install --with-deps

    - name: Run E2E Tests
      env:
        BASE_URL: http://localhost:7247
      run: dotnet test BankingSystem.E2ETests/ --configuration Release --no-build --verbosity normal --settings BankingSystem.E2ETests/BankingSystem.E2ETests.runsettings
